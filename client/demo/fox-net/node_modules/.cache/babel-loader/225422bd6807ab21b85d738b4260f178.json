{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442 TENSOR\\\\Social_network_1\\\\client\\\\demo\\\\fox-net\\\\src\\\\components\\\\Dialogs.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../style.css';\nimport Header from '../container/header.js';\nimport DialogList from './DialogList.js';\nimport Chat from './DialogChat.js';\nimport { test } from '../actions/test.js';\n\nclass Dialogs extends Component {\n  componentDidMount() {\n    this.props.fetchData(\"/wall/1\");\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(Header, {\n      user: \"\\u0412\\u0435\\u043D\\u0438\\u043C\\u0438\\u043D \\u0410\\u043D\\u043E\\u043D\\u0438\\u043C\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"dialogWrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(DialogList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }), React.createElement(Chat, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user\n}), dispatch => ({\n  onChooseDialog: dialog => {\n    dispatch({\n      type: 'CHANGE_DIALOG',\n      dialog: dialog\n    });\n  },\n  fetchData: url => {\n    dispatch(test(url));\n  }\n}))(Dialogs);","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\Проект TENSOR\\Social_network_1\\client\\demo\\fox-net\\src\\components\\Dialogs.js"],"names":["React","Component","connect","Header","DialogList","Chat","test","Dialogs","componentDidMount","props","fetchData","render","state","user","dispatch","onChooseDialog","dialog","type","url"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAAQC,IAAR,QAAmB,oBAAnB;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAA+B;AAC7BO,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWC,SAAX,CAAqB,SAArB;AACD;;AACDC,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,iFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA;AAAS,MAAA,SAAS,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFA,CADF;AASD;;AAd4B;;AAiB/B,eAAeT,OAAO,CACpBU,KAAK,KAAK;AACRC,EAAAA,IAAI,EAAED,KAAK,CAACC;AADJ,CAAL,CADe,EAIpBC,QAAQ,KAAI;AACVC,EAAAA,cAAc,EAAGC,MAAD,IAAW;AACzBF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE,eAAP;AAAwBD,MAAAA,MAAM,EAAEA;AAAhC,KAAD,CAAR;AACD,GAHS;AAIVN,EAAAA,SAAS,EAAGQ,GAAD,IAAQ;AACjBJ,IAAAA,QAAQ,CAACR,IAAI,CAACY,GAAD,CAAL,CAAR;AACD;AANS,CAAJ,CAJY,CAAP,CAYbX,OAZa,CAAf","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../style.css'\r\nimport Header from '../container/header.js'\r\nimport DialogList from './DialogList.js'\r\nimport Chat from './DialogChat.js'\r\nimport {test} from '../actions/test.js'\r\n\r\nclass Dialogs extends Component{\r\n  componentDidMount(){\r\n    this.props.fetchData(\"/wall/1\")\r\n  }\r\n  render(){\r\n    return(\r\n      <React.Fragment>\r\n      <Header user='Венимин Аноним'/>\r\n      <section className='dialogWrap'>\r\n        <DialogList />\r\n        <Chat/>\r\n      </section>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    user: state.user\r\n  }),\r\n  dispatch =>({\r\n    onChooseDialog: (dialog) =>{\r\n      dispatch({type: 'CHANGE_DIALOG', dialog: dialog})\r\n    },\r\n    fetchData: (url) =>{\r\n      dispatch(test(url))\r\n    }\r\n  })\r\n)(Dialogs)\r\n"]},"metadata":{},"sourceType":"module"}