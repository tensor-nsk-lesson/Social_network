{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442 TENSOR\\\\Social_network_1\\\\client\\\\demo\\\\fox-net\\\\src\\\\components\\\\DialogChat.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport userPhoto from '../pics/profilePhoto.jpg';\nimport sendMessage from '../pics/sendMessage.png';\nimport { getMessages } from '../actions/getMessages.js';\nimport { postMessage } from '../actions/messages.js';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      className: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.onGetMessages('/dialog/61536/get_messages');\n  }\n\n  sendMessage() {\n    // let socket = io.connect('http://localhost');\n    let message = this.messageInput.value;\n    let now = new Date();\n    let date = now.getDate() + '.' + now.getMonth() + '.' + now.getFullYear() + ' ' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();\n    let postData = {\n      message: message,\n      id_dialog: 61536,\n      time: date\n    };\n    console.log(postData); // let data = {\n    //   message: message,\n    //   room: 555\n    // }\n    // socket.send('message', JSON.stringify(data))\n    // socket.on('response')\n\n    this.props.onSendMessage('/push_message', postData);\n  }\n\n  render() {\n    // let messages = this.props.messages.map((item,key) =>{\n    //   return <div className={this.props.sender[key]} key={key}><p>{item}</p> <span className='messageTime'>{this.props.time[key]}</span></div>\n    // });\n    let arr = [];\n    console.log(this.porps.messages.iDUser);\n    console.log(this.props.user);\n\n    for (let i = 0; i < this.props.messages; i++) {\n      arr.push(this.props.friends[i]);\n    }\n\n    let dialog = this.props.messages.map((item, key) => {\n      let className;\n\n      if (item.iDUser != this.props.user) {\n        className = 'interlocutorMessage';\n      } else {\n        className = 'yourMessage';\n      }\n\n      return React.createElement(\"div\", {\n        className: className,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, item.Message));\n    });\n    console.log(this.props.messages);\n    return React.createElement(\"div\", {\n      className: \"dialogMessages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messageProfileInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: userPhoto,\n      alt: \"userPhoto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"\\u041A\\u043E\\u0442 \\u0415\\u0432\\u0413\\u0415\\u041D\\u0418\\u0419\")), React.createElement(\"p\", {\n      className: \"isOnline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dialogBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, dialog), React.createElement(\"textarea\", {\n      placeholder: \"Enter your message\",\n      className: \"messageInput\",\n      ref: input => {\n        this.messageInput = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"sendMessage\",\n      onClick: this.sendMessage.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(state => ({\n  // interlocutor: state.dialog.interlocutor,\n  // messages: state.messagesList.messages,\n  // time: state.messagesList.time,\n  // sender: state.messagesList.sender\n  messages: state.getMessages,\n  user: state.header.Id\n}), dispatch => ({\n  onGetMessages: url => {\n    dispatch(getMessages(url));\n  },\n  onSendMessage: (url, data) => {\n    dispatch(postMessage(url, data));\n  }\n}))(Chat);","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\Проект TENSOR\\Social_network_1\\client\\demo\\fox-net\\src\\components\\DialogChat.js"],"names":["React","Component","connect","io","userPhoto","sendMessage","getMessages","postMessage","Chat","constructor","props","state","className","componentDidMount","onGetMessages","message","messageInput","value","now","Date","date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","postData","id_dialog","time","console","log","onSendMessage","render","arr","porps","messages","iDUser","user","i","push","friends","dialog","map","item","key","Message","input","bind","header","Id","dispatch","url","data"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport io from 'socket.io-client';\r\nimport userPhoto from '../pics/profilePhoto.jpg';\r\nimport sendMessage from '../pics/sendMessage.png';\r\nimport {getMessages} from '../actions/getMessages.js';\r\nimport {postMessage} from '../actions/messages.js';\r\n\r\n\r\nclass Chat extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {className: ''}\r\n  }\r\n  componentDidMount(){\r\n    this.props.onGetMessages('/dialog/61536/get_messages')\r\n  }\r\n  sendMessage(){\r\n    // let socket = io.connect('http://localhost');\r\n    let message = this.messageInput.value;\r\n    let now = new Date();\r\n    let date = now.getDate() + '.' +\r\n      now.getMonth() + '.' +\r\n      now.getFullYear() + ' ' +\r\n      now.getHours() + ':' +\r\n      now.getMinutes() + ':' +\r\n      now.getSeconds();\r\n    let postData = {\r\n      message: message,\r\n      id_dialog: 61536,\r\n      time: date\r\n    }\r\n\r\n    console.log(postData);\r\n    // let data = {\r\n    //   message: message,\r\n    //   room: 555\r\n    // }\r\n    // socket.send('message', JSON.stringify(data))\r\n    // socket.on('response')\r\n    this.props.onSendMessage('/push_message', postData)\r\n  }\r\n  render(){\r\n    // let messages = this.props.messages.map((item,key) =>{\r\n    //   return <div className={this.props.sender[key]} key={key}><p>{item}</p> <span className='messageTime'>{this.props.time[key]}</span></div>\r\n    // });\r\n    let arr = [];\r\n    console.log(this.porps.messages.iDUser);\r\n    console.log(this.props.user);\r\n    for(let i=0; i<this.props.messages; i++){\r\n      arr.push(this.props.friends[i])\r\n    }\r\n    let dialog = this.props.messages.map((item,key) =>{\r\n      let className;\r\n      if (item.iDUser != this.props.user){\r\n        className = 'interlocutorMessage';\r\n      }else{\r\n        className = 'yourMessage';\r\n      }\r\n      return <div className={className} key={key}><p>{item.Message}</p></div>\r\n    })\r\n\r\n    console.log(this.props.messages);\r\n    return(\r\n      <div className=\"dialogMessages\">\r\n        <div className=\"messageProfileInfo\">\r\n          <img src={userPhoto} alt=\"userPhoto\"/>\r\n          <h4>Кот ЕвГЕНИЙ</h4>\r\n        </div>\r\n        <p className='isOnline'></p>\r\n        <div className=\"dialogBlock\">\r\n          {dialog}\r\n        </div>\r\n        <textarea placeholder='Enter your message' className='messageInput'  ref={(input) => {this.messageInput = input}} ></textarea>\r\n        <button className='sendMessage' onClick={this.sendMessage.bind(this)}><img src={sendMessage}/></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state =>({\r\n    // interlocutor: state.dialog.interlocutor,\r\n    // messages: state.messagesList.messages,\r\n    // time: state.messagesList.time,\r\n    // sender: state.messagesList.sender\r\n    messages: state.getMessages,\r\n    user: state.header.Id\r\n  }),\r\n  dispatch =>({\r\n    onGetMessages : (url) =>{\r\n      dispatch(getMessages(url))\r\n    },\r\n    onSendMessage: (url, data) =>{\r\n      dispatch(postMessage(url,data))\r\n    }\r\n  })\r\n)(Chat)\r\n"]},"metadata":{},"sourceType":"module"}