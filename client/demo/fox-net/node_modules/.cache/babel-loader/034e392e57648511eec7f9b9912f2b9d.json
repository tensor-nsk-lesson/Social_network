{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442 TENSOR\\\\Social_network_1\\\\client\\\\demo\\\\fox-net\\\\src\\\\components\\\\DialogChat.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport userPhoto from '../pics/profilePhoto.jpg';\nimport sendMessage from '../pics/sendMessage.png';\nimport { getMessages } from '../actions/getMessages.js';\nimport { postMessage } from '../actions/messages.js';\n\nclass Chat extends Component {\n  componentDidMount() {\n    this.props.onGetMessages('/dialog/61536/get_messages');\n  }\n\n  sendMessage() {\n    // let socket = io.connect('http://localhost');\n    let message = this.messageInput.value;\n    let now = new Date();\n    let date = now.getDate() + '.' + now.getMonth() + '.' + now.getFullYear() + ' ' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();\n    console.log(data);\n    let postData = {\n      message: message,\n      id_dialog: 61536,\n      time: date // let data = {\n      //   message: message,\n      //   room: 555\n      // }\n      // socket.send('message', JSON.stringify(data))\n      // // socket.on('response')\n      // this.props.onSendMessage('/push_message', JSON.stringify(postData))\n\n    };\n  }\n\n  render() {\n    // let messages = this.props.messages.map((item,key) =>{\n    //   return <div className={this.props.sender[key]} key={key}><p>{item}</p> <span className='messageTime'>{this.props.time[key]}</span></div>\n    // });\n    return React.createElement(\"div\", {\n      className: \"dialogMessages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"messageProfileInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: userPhoto,\n      alt: \"userPhoto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.props.interlocutor)), React.createElement(\"p\", {\n      className: \"isOnline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"online\"), React.createElement(\"div\", {\n      className: \"dialogBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Enter your message\",\n      className: \"messageInput\",\n      ref: input => {\n        this.messageInput = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"sendMessage\",\n      onClick: this.sendMessage.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(state => ({// interlocutor: state.dialog.interlocutor,\n  // messages: state.messagesList.messages,\n  // time: state.messagesList.time,\n  // sender: state.messagesList.sender\n}), dispatch => ({\n  onGetMessages: url => {\n    dispatch(getMessages(url));\n  },\n  onSendMessage: (url, data) => {\n    dispatch(postMessage(url, data));\n  }\n}))(Chat);","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\Проект TENSOR\\Social_network_1\\client\\demo\\fox-net\\src\\components\\DialogChat.js"],"names":["React","Component","connect","io","userPhoto","sendMessage","getMessages","postMessage","Chat","componentDidMount","props","onGetMessages","message","messageInput","value","now","Date","date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","console","log","data","postData","id_dialog","time","render","interlocutor","input","bind","state","dispatch","url","onSendMessage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;AAGA,MAAMC,IAAN,SAAmBP,SAAnB,CAA4B;AAC1BQ,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,4BAAzB;AACD;;AACDN,EAAAA,WAAW,GAAE;AACX;AACA,QAAIO,OAAO,GAAG,KAAKC,YAAL,CAAkBC,KAAhC;AACA,QAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA,QAAIC,IAAI,GAAGF,GAAG,CAACG,OAAJ,KAAgB,GAAhB,GACTH,GAAG,CAACI,QAAJ,EADS,GACQ,GADR,GAETJ,GAAG,CAACK,WAAJ,EAFS,GAEW,GAFX,GAGTL,GAAG,CAACM,QAAJ,EAHS,GAGQ,GAHR,GAITN,GAAG,CAACO,UAAJ,EAJS,GAIU,GAJV,GAKTP,GAAG,CAACQ,UAAJ,EALF;AAMEC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACF,QAAIC,QAAQ,GAAG;AACbf,MAAAA,OAAO,EAAEA,OADI;AAEbgB,MAAAA,SAAS,EAAE,KAFE;AAGbC,MAAAA,IAAI,EAAEZ,IAHO,CAKf;AACA;AACA;AACA;AACA;AACA;AACA;;AAXe,KAAf;AAYD;;AACDa,EAAAA,MAAM,GAAE;AACN;AACA;AACA;AACA,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAE1B,SAAV;AAAqB,MAAA,GAAG,EAAC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKM,KAAL,CAAWqB,YAAhB,CAFF,CADF,EAKE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAME;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EASE;AAAU,MAAA,WAAW,EAAC,oBAAtB;AAA2C,MAAA,SAAS,EAAC,cAArD;AAAqE,MAAA,GAAG,EAAGC,KAAD,IAAW;AAAC,aAAKnB,YAAL,GAAoBmB,KAApB;AAA0B,OAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAE,KAAK3B,WAAL,CAAiB4B,IAAjB,CAAsB,IAAtB,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsE;AAAK,MAAA,GAAG,EAAE5B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtE,CAVF,CADF;AAcD;;AA9CyB;;AAiD5B,eAAeH,OAAO,CACpBgC,KAAK,KAAI,CACP;AACA;AACA;AACA;AAJO,CAAJ,CADe,EAOpBC,QAAQ,KAAI;AACVxB,EAAAA,aAAa,EAAIyB,GAAD,IAAQ;AACtBD,IAAAA,QAAQ,CAAC7B,WAAW,CAAC8B,GAAD,CAAZ,CAAR;AACD,GAHS;AAIVC,EAAAA,aAAa,EAAE,CAACD,GAAD,EAAMV,IAAN,KAAc;AAC3BS,IAAAA,QAAQ,CAAC5B,WAAW,CAAC6B,GAAD,EAAKV,IAAL,CAAZ,CAAR;AACD;AANS,CAAJ,CAPY,CAAP,CAeblB,IAfa,CAAf","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport io from 'socket.io-client';\r\nimport userPhoto from '../pics/profilePhoto.jpg';\r\nimport sendMessage from '../pics/sendMessage.png';\r\nimport {getMessages} from '../actions/getMessages.js';\r\nimport {postMessage} from '../actions/messages.js';\r\n\r\n\r\nclass Chat extends Component{\r\n  componentDidMount(){\r\n    this.props.onGetMessages('/dialog/61536/get_messages')\r\n  }\r\n  sendMessage(){\r\n    // let socket = io.connect('http://localhost');\r\n    let message = this.messageInput.value;\r\n    let now = new Date();\r\n    let date = now.getDate() + '.' +\r\n      now.getMonth() + '.' +\r\n      now.getFullYear() + ' ' +\r\n      now.getHours() + ':' +\r\n      now.getMinutes() + ':' +\r\n      now.getSeconds();\r\n      console.log(data);\r\n    let postData = {\r\n      message: message,\r\n      id_dialog: 61536,\r\n      time: date\r\n    }\r\n    // let data = {\r\n    //   message: message,\r\n    //   room: 555\r\n    // }\r\n    // socket.send('message', JSON.stringify(data))\r\n    // // socket.on('response')\r\n    // this.props.onSendMessage('/push_message', JSON.stringify(postData))\r\n  }\r\n  render(){\r\n    // let messages = this.props.messages.map((item,key) =>{\r\n    //   return <div className={this.props.sender[key]} key={key}><p>{item}</p> <span className='messageTime'>{this.props.time[key]}</span></div>\r\n    // });\r\n    return(\r\n      <div className=\"dialogMessages\">\r\n        <div className=\"messageProfileInfo\">\r\n          <img src={userPhoto} alt=\"userPhoto\"/>\r\n          <h4>{this.props.interlocutor}</h4>\r\n        </div>\r\n        <p className='isOnline'>online</p>\r\n        <div className=\"dialogBlock\">\r\n\r\n        </div>\r\n        <textarea placeholder='Enter your message' className='messageInput'  ref={(input) => {this.messageInput = input}} ></textarea>\r\n        <button className='sendMessage' onClick={this.sendMessage.bind(this)}><img src={sendMessage}/></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state =>({\r\n    // interlocutor: state.dialog.interlocutor,\r\n    // messages: state.messagesList.messages,\r\n    // time: state.messagesList.time,\r\n    // sender: state.messagesList.sender\r\n  }),\r\n  dispatch =>({\r\n    onGetMessages : (url) =>{\r\n      dispatch(getMessages(url))\r\n    },\r\n    onSendMessage: (url, data) =>{\r\n      dispatch(postMessage(url,data))\r\n    }\r\n  })\r\n)(Chat)\r\n"]},"metadata":{},"sourceType":"module"}